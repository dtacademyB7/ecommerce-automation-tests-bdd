Build a Cucumber BDD framework:
1. Add dependencies (selenium, webdrivermanager, cucumber-java, cucumber-junit, cucumber-core)
2. Add .gitignore
3. Create packages, add utilities, properties file
4.


     Cucumber framework components
     - feature files
     - Step Definition classes
     - Runner class
     - the scenario steps in feature files are connected to the corresponding
       step definition methods in step def classes thru Runner class's @CucumberOptions options:
          features = "src/test/resources",
          glue = "stepDefinitions"
     - the scenario step is matched to the corresponding step definition method through the text of the scenario step and step definition
           For example:
               step -> Given I am on the homepage
               step def method annotation -> @Given("I am on the homepage")



    Basic workflow of a Cucumber framework

     - create a feature file
     - add scenario/s to a feature file
     - generate snippet/s for unimplemented steps
     - implement the each step def method logic


    Cucumber Hooks:
    - methods with @Before and @After annotations that are added under step defs folder
    - used to setup  and teardown


   How to run scenarios with specific tags through CMD?

    mvn verify -Dcucumber.filter.tags="@product"
    mvn verify -Dcucumber.filter.tags="@product and not @quantity"
    mvn verify -Dcucumber.filter.tags="@product or not @quantity"

    The cmd tags will override the tags in Runner class.


    Cucumber DataTable workflow:
    - add a DataTable to a Scenario Step
    - generate a snippet and change the DataTable parameter to one of the following for automatic conversion:
      List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or Map<K, List<V>>


     Cucumber Scenario Outline:  native cucumber mechanism to implement Data-Driven Testing
       Difference between Examples Table and DataTable:
        -Examples table applies to the entire scenario outline, meaning for each row of the table, the entire scenario
        is going to run once
        - DataTable belongs to only a single scenario step and it is a convenient way to pass complex table style data
        into a single step.




     Running tests thru CMD in Cucumber Framework:

           -Add Maven Surefire plugin (latest version)
           - Configure it by including the name of the class to run:
                              <configuration>
                                   <includes>
                                       <include>**/*CucumberRunner.java</include>
                                   </includes>
                               </configuration>
           - run with mvn test


           Running scenarios with specific tags thru cmd:

           mvn verify -Dcucumber.filter.tags="@temp"
           mvn verify -Dcucumber.filter.tags="@test and @temp"
           mvn verify -Dcucumber.filter.tags="@test or @temp"
           mvn verify -Dcucumber.filter.tags="@test and not @temp"

           When you run your test through CMD using Maven, tags passed thru CMD will override the tags from CukeRunner class.

           In Cucumber framework we can implement data-driven testing natively with Scenario Outline with Examples table.
           The difference between DataTable and Scenario Outline Examples table -> datatable belongs to one step of the scenario, examples table applies to the entire scenario


           @RunWith -> Junit annotation that makes the class a runnable class
           @CucumberOptions -> Cucumber annotation that helps us configure cucumber options to run the tests


           How to run a specific runner class thru CMD when you have multiple runners?

           - Maven surefire plugin determines the name of the runner class to run within its <configuration>  and <includes> tag
                       <plugin>
                           <groupId>org.apache.maven.plugins</groupId>
                           <artifactId>maven-surefire-plugin</artifactId>
                           <version>3.0.0-M5</version>
                           <configuration>
                               <testFailureIgnore>true</testFailureIgnore>
                               <includes>
                                   <include>**/*CucumberRunner2.java</include>-->
                                </includes>
                           </configuration>
                       </plugin>



           - When you have multiple runners you can use a placeholder in surefire plugin
               and pass the name of the runner class thru command line with -D switch -> mvn verify -DrunnerClass=**/*CucumberRunner2.java
                            <plugin>
                               <groupId>org.apache.maven.plugins</groupId>
                               <artifactId>maven-surefire-plugin</artifactId>
                               <version>3.0.0-M5</version>
                               <configuration>
                                   <testFailureIgnore>true</testFailureIgnore>
                                   <includes>
                                       <include>${runnerClass}</include>-->
                                   </includes>
                               </configuration>
                           </plugin>



           - How to re-run only the failed scenarios in Cucumber framework?

             1. Add "rerun:target/failed.txt" to your main runner class which generates a text file with the list of failed scenarios
             2. Add another runner class where you indicate the above text file's path for features:
                        features = "@target/failed.txt"
             3. Run main runner and failed scenarios runner back to back thru Maven Surefire plugin:
                  <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-surefire-plugin</artifactId>
                                <version>3.0.0-M5</version>
                                <configuration>
                                    <testFailureIgnore>true</testFailureIgnore>
                                    <includes>
                                       <include>**/*CucumberRunner.java</include>-->
                                        <include>**/*FailedScenariosRunner.java</include>-->
                                    </includes>
                                </configuration>
                  </plugin>



              - How to run cross-browser tests in Cucumber framework?
                - We pass the name of the browser thru command line with -D switch and run the same tests with multiple commands
                - This can be done through batch file or through Jenkins commands
                - batch file example:
                        call mvn verify -Dbrowser=edge
                        call mvn verify -Dbrowser=chrome
                        call mvn verify -Dbrowser=headlessChrome


              We use "mvn verify" in Cucumber framework to run tests so that the pretty report is generated,
                otherwise you can run the tests as usual with mvn test



             How to run tests in parallel in Cucumber framework?


             We can enable parallel test in Cucumber natively with JUnit.
             But we need to remember that with this option you can run only FEATURES in parallel.
             If there is a need for running SCENARIOS in parallel, you can incorporate TestNG.


             Steps to implement running parallel Features in Cucumber with Junit:
              1.Give the scope of the feature files that you want to run in parallel in your runner class
                   features = "src/test/resources/parallel"
                Optionally create a separate folder for feature files that you want to run in parallel
              2.Add these 2 options under the <configuration> tag of Maven Surefire plugin:
                     <parallel>methods</parallel>
                     <useUnlimitedThreads>true</useUnlimitedThreads>
              3.Run the tests thru command line, if you run it through IDE it will not run in parallel






